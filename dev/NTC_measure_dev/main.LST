C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil4for51\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include "intrins.h"
   3          
   4          #define ADC_POWER   0x80    //ADC电源控制位
   5          #define ADC_FLAG    0x10    //ADC完成标志位
   6          #define ADC_START   0x08    //ADC启动控制位
   7          #define ADC_SPEED0  0x00    //ADC转换速度，一次转换需要540个时钟
   8          #define ADC_SPEED1  0x20    //ADC转换速度，一次转换需要360个时钟
   9          #define ADC_SPEED2  0x40    //ADC转换速度，一次转换需要180个时钟
  10          #define ADC_SPEED3  0x60    //ADC转换速度，一次转换需要90个时钟
  11            
  12          /*数码管段码表  低电平有效*///0    1    2        3       4         5    6       7        8        9             A        B    E   F     -    灭
  13          unsigned char code Table[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0x86,0x8E,0xBF,0xF
             -F};// 数码管转换字表 0-9,A-F GHPU ,-,灭
  14          unsigned char code Table1[]={'0','1','2','3','4','5','6','7','8','9','-'};//字符串转换字表0-9,-,灭
  15          unsigned char Sendtemp[6]={' ',' ',' ',' ',' ',' '};    //串口传输数组
  16          unsigned char Showtemp[4]={0,0,0,0};    //数码管显示显示数组
  17          unsigned char MAXMINtemp[3]={0,0,0};    //最大值最小值设定暂存数组
  18          
  19          char loca_count =0;      //
  20          char signal = 0;         //符号变量
  21          float maxmum = 40;       //温度最大值
  22          float minmum = 20;       //温度最小值
  23          int maxmum1 = 0;         //最大值暂存
  24          int minmum1 = 0;     //最小值暂存
  25          char flag1 = 0;           
  26          char error = 0;      //错误状态检测
  27          
  28          float  VCC_measure  = 0;    //电压测量值变量
  29          float temp_result = 0;          //温度测量值变量
  30          
  31          unsigned char Ledcount = 0;    //数码管显示计数
  32          unsigned char keycount = 0;    //摁键消抖定时20ms计数
  33          unsigned char keystatus = 0;   //摁键摁下状态变量 
  34          unsigned char key = 0;             // 摁键循环变量
  35          unsigned char key_final = 0;   //摁键抬起后最终执行变量
  36          char mood = 0;                 //系统工作模式    0测温   1电压
  37          char sleep_flag = 0;           //休眠标志
  38          char sleep_flag1 = 0;
  39          char turn_start =1;                        //
  40          
  41          char alarm_mood = 0;               //温度上下限报警模式选择
  42          
  43          float code NTC[146][2]={
  44          {-40,340.9281},{-39,318.8772},{-38,298.3978},{-37,279.3683},{-36,261.6769},{-35,245.2212},{-34,229.9072},{
             --33,215.6488},{-32,202.3666},{-31,189.9878},
  45          {-30,178.4456},{-29,167.6783},{-28,157.6292},{-27,148.246},{-26,139.4807},{-25,131.2888},{-24,123.6294},{-
             -23,116.4648},{-22,109.76},{-21,103.4829},
  46          {-20,97.6037},{-19,92.0947},{-18,86.9305},{-17,82.0877},{-16,77.5442},{-15,73.2798},{-14,69.2759},{-13,65.
             -5149},{-12,61.9809},{-11,58.6587},
  47          {-10,55.5345},{-9,52.5954},{-8,49.8294},{-7,47.2253},{-6,44.7727},{-5,42.462},{-4,40.2841},{-3,38.2307},{-
             -2,36.294},{-1,34.4668},{0,32.7421},
  48          {1,31.1138},{2,29.5759},{3,28.1229},{4,26.7496},{5,25.4513},{6,24.2234},{7,23.0618},{8,21.9625},{9,20.9218
             -},{10,19.9364},
  49          {11,19.0029},{12,18.1184},{13,17.28},{14,16.4852},{15,15.7313},{16,15.0161},{17,14.3375},{18,13.6932},{19,
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 2   

             -13.0815},{20,12.5005},
  50          {21,11.9485},{22,11.4239},{23,10.9252},{24,10.451},{25,10},{26,9.5709},{27,9.1626},{28,8.7738},{29,8.4037}
             -,{30,8.0512},
  51          {31,7.7154},{32,7.3954},{33,7.0904},{34,6.7996},{35,6.5223},{36,6.2577},{37,6.0053},{38,5.7645},{39,5.5345
             -},{40,5.315},
  52          {41,5.1053},{42,4.905},{43,4.7136},{44,4.5307},{45,4.3558},{46,4.1887},{47,4.0287},{48,3.8758},{49,3.7294}
             -,{50,3.5893},
  53          {51,3.4553},{52,3.3269},{53,3.2039},{54,3.0862},{55,2.9733},{56,2.8652},{57,2.7616},{58,2.6622},{59,2.5669
             -},{60,2.4755},
  54          {61,2.3879},{62,2.3038},{63,2.2231},{64,2.1456},{65,2.0712},{66,1.9998},{67,1.9312},{68,1.8653},{69,1.8019
             -},{70,1.7411},
  55          {71,1.6826},{72,1.6264},{73,1.5723},{74,1.5203},{75,1.4703},{76,1.4222},{77,1.3759},{78,1.3313},{79,1.2884
             -},{80,1.2471},
  56          {81,1.2073},{82,1.169},{83,1.1321},{84,1.0965},{85,1.0623},{86,1.0293},{87,0.9974},{88,0.9667},{89,0.9372}
             -,{90,0.9086},
  57          {91,0.8811},{92,0.8545},{93,0.8289},{94,0.8042},{95,0.7803},{96,0.7572},{97,0.735},{98,0.7135},{99,0.6927}
             -,{100,0.6727},
  58          {101,0.6533},{102,0.6346},{103,0.6165},{104,0.599},{105,0.5821}
  59          };//NTC表
  60          
  61          sbit LED1 = P4^2;
  62          sbit LED2 = P4^4;
  63          sbit KEY3 = P3^4;
  64          sbit KEY2 = P3^5;
  65          sbit KEY1 = P3^6;
  66          sbit TURN1 = P2^7;
  67          sbit TURN2 = P2^6;
  68          sbit TURN3 = P2^5;
  69          sbit TURN4 = P2^4;
  70          sbit FAN =      P3^2;                    
  71          sbit BUZZ = P3^3;
  72          
  73          /******************************
  74          函数说明：延时函数  1-65535毫秒
  75          入口参数：ms=延时毫秒数
  76          出口参数：无
  77          ******************************/
  78          void Delay_MS(unsigned int ms)
  79          {
  80   1          unsigned char i, j;
  81   1          _nop_();
  82   1          while(ms--)
  83   1          {
  84   2              i = 6;  j = 210;
  85   2              while (--i)
  86   2              while (--j);
  87   2          }
  88   1      }
  89           
  90          /******************************
  91          函数说明：初始化ADC寄存器，设置P1.6为ADC输入功能
  92          入口参数：无
  93          出口参数：无
  94          ******************************/
  95          void Init_ADC(void)
  96          {
  97   1          P1ASF = 0x40;       //打开P1.6口的ADC功能
  98   1          P1 &= 0xBF;         //设置P1.6口输出低电平确保能采集到外部电平信号
  99   1          ADC_RES = 0;        //清掉ADC转换结果寄存器
 100   1          ADC_CONTR = ADC_POWER | ADC_SPEED3; //使能A/D供电，设置转换速度90T
 101   1      }
 102          
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 3   

 103          /******************************
 104          函数说明：查询方式读取ADC转换结果
 105          入口参数：channel  ADC采样通道
 106          出口参数：result   ADC_RES ADC转换结果
 107          ******************************/
 108          unsigned int Get_AD(unsigned char channel)
 109          {
 110   1          unsigned int result;
 111   1          ADC_RES = 0;    
 112   1          ADC_RESL= 0;//清掉ADC转换结果寄存器
 113   1          ADC_CONTR =ADC_POWER|ADC_SPEED0|ADC_START|channel;//配置ADC，设置转换通道，启动转换
 114   1          _nop_();    _nop_();
 115   1          _nop_();    _nop_();            //等待设置ADC_POWER完毕
 116   1          while (!(ADC_CONTR & ADC_FLAG));//读取转换完毕标志位ADC_FLAG
 117   1          ADC_CONTR &= ~ADC_FLAG;         //清除ADC_FLAG标志位
 118   1          result = ADC_RES<<2|ADC_RESL;   //读取10位转换结果保存到result
 119   1          return result;                  //返回ADC转换结果10位
 120   1      }
 121          
 122          /******************************
 123          函数说明：电压值测量函数
 124          入口参数：无
 125          出口参数：voltage 计算后得到的电压值
 126          ******************************/
 127          float Voltage_Measure(void)
 128          {        
 129   1           float voltage = 0;
 130   1               unsigned int voltage_std_AD = 0;
 131   1               voltage_std_AD = Get_AD(7);
 132   1               voltage = (1024/(float)voltage_std_AD )*2.5;
 133   1               return voltage; 
 134   1      }
 135          
 136          /******************************
 137          函数说明：温度值测量函数
 138          入口参数：无
 139          出口参数：temperature 计算后得到的温度值
 140          ******************************/
 141          float Temp_Measure()
 142          {         int   i = 0,j = 0;
 143   1            unsigned int voltage_AD = 0;        //本次采样AD值
 144   1                long int voltage_AD_avg = 0;    //AD采样平均值
 145   1                float voltage = 0;              //根据ad求出的电压值 不利用电源电压的求法
 146   1                float resistance = 0;           //根据电压算出的传感器阻值
 147   1                float temperature = 0;                  //温度值
 148   1      
 149   1                for(j=0;j<10;j++)                              //10次求平均 采样间隔1ms
 150   1                {
 151   2                        voltage_AD = Get_AD(6);
 152   2                        Delay_MS(1);                                                     //采样间隔1ms
 153   2                        voltage_AD_avg += voltage_AD;
 154   2                }
 155   1                
 156   1                voltage_AD_avg = voltage_AD_avg/10;    //  除10求平均 
 157   1                if (voltage_AD_avg <5 )                                //传感器未连接判断  如果没电压则没有连接
 158   1                {error = 1;}
 159   1                else
 160   1                {error = 0;}
 161   1                resistance = 10*(1024 - (float)voltage_AD_avg)/(float)voltage_AD_avg;    //计算电阻值 根据满电压ad为102
             -4
 162   1                for(i=0; i<145; i++)                                                                                                     //轮询法查表
 163   1                {
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 4   

 164   2                   if((resistance<=NTC[i][1]) && (resistance>NTC[i+1][1]) )     //|| (resistance>=NTC[i][1])
 165   2                         {
 166   3                                      temperature = NTC[i][0] + (NTC[i][1]-resistance)/(NTC[i][1]-NTC[i+1][1]);break;   //线性插值法
 167   3                         }
 168   2                       else continue;
 169   2                }               
 170   1                return temperature;
 171   1      }
 172          
 173          /******************************
 174          函数说明：数转换为4位数码管显示码
 175          入口参数：dat 需转化的数字
 176          出口参数：无 操作对象为Showtemp[4]
 177          ******************************/
 178          void LED_Translate(float dat)
 179          {
 180   1          int data1 = 0;
 181   1              
 182   1              if ((dat<10)&&(dat>-10))
 183   1              {
 184   2                      data1 = (int)(dat*100);
 185   2                              if(dat >= 0)    
 186   2                              {Showtemp[0] = 0xFF;}                      //数码管第1位显示 符号位
 187   2                              if(dat < 0)     
 188   2                              {Showtemp[0] = 0xBF;
 189   3                              data1 = 0-data1;}
 190   2                      Showtemp[1] =  Table[(data1/100)]&0x7F;       //个位数显示  加小数点                                            
 191   2                      Showtemp[2] =  Table[data1%100/10];         //小数点后一位显示          
 192   2                      Showtemp[3] =  Table[data1%10];                   //小数点后两位显示
 193   2          }
 194   1              else if ((dat<100)&&(dat>-100))
 195   1              {
 196   2                      data1 = (int)(dat*10);
 197   2                              if(dat >= 0)    
 198   2                              {Showtemp[0] = 0xFF;}                           //数码管第1位显示       符号位
 199   2                              if(dat < 0)     
 200   2                              {Showtemp[0] = 0xBF;
 201   3                              data1 = 0-data1;}
 202   2                      Showtemp[1] =  Table[data1/100];                 //十位数显示                                   
 203   2                      Showtemp[2] =  Table[data1%100/10]&0x7F;     //个位数显示  加小数点          
 204   2                      Showtemp[3] =  Table[data1%10];                      //小数点后一位显示
 205   2          }
 206   1              else if ((dat>=100)&&(dat<1000))
 207   1              {
 208   2                       data1 = (int)(dat*10);
 209   2                       Showtemp[0] =  Table[data1/1000];                //百位数显示
 210   2                       Showtemp[1] =  Table[data1/100];                 //十位数显示                                  
 211   2                       Showtemp[2] =  Table[data1%100/10]&0x7F;     //个位数显示  加小数点          
 212   2                       Showtemp[3] =  Table[data1%10];                      //小数点后一位显示
 213   2              }
 214   1              else if (dat>=1000)
 215   1              {
 216   2                       Showtemp[0] =  Table[(int)dat/1000];      //千位数显示
 217   2                       Showtemp[1] =  Table[(int)dat%1000/100];   //百位数显示                                        
 218   2                       Showtemp[2] =  Table[(int)dat%100/10];     //十位数显示
 219   2                       Showtemp[3] =  Table[(int)dat%10];                     //个
 220   2              }                                               
 221   1      }
 222          /******************************
 223          函数说明：数转换为6位字符串 最后一位为空格
 224          入口参数：dat 需转化的数字
 225          出口参数：无 操作对象为Sendtemp[6]
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 5   

 226          ******************************/
 227          void STR_Translate(float dat)
 228          {
 229   1          int data1 = 0;
 230   1              Sendtemp[0] =  ' ';           //个位数显示  加小数点                                            
 231   1              Sendtemp[1] =  ' ';         //小数点后一位显示          
 232   1              Sendtemp[2] =  ' ';               //小数点后两位显示
 233   1              Sendtemp[3] =  ' ';           //个位数显示  加小数点                                            
 234   1              Sendtemp[4] =  ' ';         //小数点后一位显示
 235   1              Sendtemp[5] =  ' ';         //小数点后一位显示          
 236   1              if ((dat<10)&&(dat>-10))
 237   1              {
 238   2                      data1 = (int)(dat*100);
 239   2                              if(dat >= 0)    
 240   2                              {Sendtemp[0] = ' ';}                       //数码管第1位显示
 241   2                              if(dat < 0)     
 242   2                              {Sendtemp[0] = '-';
 243   3                              data1 = 0-data1;}
 244   2                      Sendtemp[1] =  Table1[(data1/100)];           //个位数显示  加小数点
 245   2                      Sendtemp[2] =  '.';                                             
 246   2                      Sendtemp[3] =  Table1[data1%100/10];         //小数点后一位显示          
 247   2                      Sendtemp[4] =  Table1[data1%10];                  //小数点后两位显示
 248   2          }
 249   1              else if ((dat<100)&&(dat>-100))
 250   1              {
 251   2                      data1 = (int)(dat*10);
 252   2                              if(dat >= 0)    
 253   2                              {Sendtemp[0] = ' ';}                       //数码管第1位显示
 254   2                              if(dat < 0)     
 255   2                              {Sendtemp[0] = '-';
 256   3                              data1 = 0-data1;}
 257   2                      Sendtemp[1] =  Table1[data1/100];                 //十位数显示                                  
 258   2                      Sendtemp[2] =  Table1[data1%100/10];
 259   2                      Sendtemp[3] =  '.';                       //个位数显示  加小数点          
 260   2                      Sendtemp[4] =  Table1[data1%10];                  //小数点后一位显示
 261   2          }
 262   1              else if ((dat>=100)&&(dat<1000))
 263   1              {
 264   2                       data1 = (int)(dat*10);
 265   2                       Sendtemp[0] =  Table1[data1/1000];               //bai位数显示
 266   2                       Sendtemp[1] =  Table1[data1/100];                //十位数显示                                  
 267   2                       Sendtemp[2] =  Table1[data1%100/10];     //个位数显示  加小数点
 268   2                       Sendtemp[3] =  '.';         
 269   2                       Sendtemp[4] =  Table1[data1%10];                 //小数点后一位显示
 270   2              }
 271   1              else if (dat>=1000)
 272   1              {
 273   2                       Sendtemp[0] =  Table1[(int)dat/1000];     //bai位数显示
 274   2                       Sendtemp[1] =  Table1[(int)dat%1000/100];   //十位数显示                                       
 275   2                       Sendtemp[2] =  Table1[(int)dat%100/10];     //个位数显示
 276   2                       Sendtemp[3] =  Table1[(int)dat%10];
 277   2              }                                               
 278   1      }
 279          
 280          /******************************
 281          函数说明：数码管全灭 无需进入中断执行 全部 四个位 拉高
 282          入口参数：无
 283          出口参数：无 
 284          ******************************/
 285          void LED_Clean(void)             //LED灯全灭函数
 286          {       int ii = 0;
 287   1              Showtemp[0] = 0xFF;     
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 6   

 288   1              Showtemp[1] = 0xFF; 
 289   1              Showtemp[2] = 0xFF; 
 290   1              Showtemp[3] = 0xFF;
 291   1              for(ii=0; ii<4; ii++)
 292   1              {
 293   2                  P2 = 0x0F;               //关闭所有数码管选通
 294   2              P0 = Showtemp[ii];       //送段码 低电平有效
 295   2              P2 = ~(0x01<<ii);    }   //选择位选
 296   1      }
 297          /******************************
 298          函数说明：摁键扫描函数 中断执行 
 299          入口参数：无   全局变量   keystatus  keycount  key_final
 300          出口参数：无 
 301          ******************************/
 302          void key_scan(void)
 303          {
 304   1              if (keystatus == 0)                      //摁键摁下
 305   1                      {                   
 306   2                              if (KEY1 == 0)
 307   2                              keystatus =1;
 308   2                              if (KEY2 == 0)
 309   2                              keystatus =2;
 310   2                              if (KEY3 == 0)
 311   2                              keystatus =3; 
 312   2                      }
 313   1              else
 314   1              {           
 315   2                      keycount++;
 316   2                      if(keycount==50)                        //消抖检测
 317   2                      {
 318   3                         keycount = 0;
 319   3                         if(keystatus == 1)
 320   3                                {if (KEY1 == 0)
 321   4                                        key = 1;}
 322   3                         if(keystatus == 2)
 323   3                                {if (KEY2 == 0)
 324   4                                        key = 2;}
 325   3                         if(keystatus == 3)
 326   3                                {if (KEY3 == 0)
 327   4                                        key = 3;}
 328   3                         keystatus =0;
 329   3                      }
 330   2                      
 331   2              }
 332   1         if(key == 1)                                         //摁键抬起确认  key_final置位代表一次摁键物理意义完成
 333   1                {if (KEY1 == 1)
 334   2                        {key_final = 1;key = 0;}}
 335   1         if(key == 2)
 336   1                {if (KEY2 == 1)
 337   2                        {key_final = 2;key = 0;}}
 338   1         if(key == 3)
 339   1                {if (KEY3 == 1)
 340   2                        {key_final = 3;key = 0;}}
 341   1      }
 342          
 343          /******************************
 344          函数说明：定时器0初始化  16位定时器自动重装载模式
 345          入口参数：无   
 346          出口参数：无 
 347          ******************************/
 348          void Timer0Init(void)           //500微秒@11.0592MHz
 349          {
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 7   

 350   1              AUXR |= 0x80;           //定时器时钟1T模式
 351   1              TMOD &= 0xF0;           //设置定时器模式
 352   1      
 353   1              TL0 = 0x66;                 //设置定时初值
 354   1              TH0 = 0xEA;                 //设置定时初值
 355   1              TF0 = 0;                //清除TF0标志
 356   1              TR0 = 1;                    //定时器0开始计时
 357   1      }
 358          
 359          /******************************
 360          函数说明：外部中断2中断服务函数  休眠标志置位和取消
 361          入口参数：无   
 362          出口参数：无   修改全局变量sleep_flag
 363          ******************************/
 364          void input2_ISR (void) interrupt 10                   //外部中断2
 365          {
 366   1           Delay_MS(25);
 367   1               if (KEY1 == 0)           
 368   1               {
 369   2               if(sleep_flag == 0)
 370   2                      {sleep_flag = 1;}
 371   2               else if(sleep_flag == 1)
 372   2                  sleep_flag = 0;
 373   2               } 
 374   1      }
 375          
 376          /******************************
 377          函数说明：定时器0中断服务函数  数码管扫描  摁键扫描
 378          入口参数：无   
 379          出口参数：无   修改全局变量sleep_flag
 380          ******************************/
 381          //Time0扫描LED显示驱动，计时,500us
 382          void time0(void) interrupt 1
 383          {
 384   1          if(4==++Ledcount)              //数码管扫描
 385   1          {Ledcount=0;
 386   2              }
 387   1          P2 = 0x0F;                 //关闭所有数码管选通
 388   1          P0 = Showtemp[Ledcount];       //送段码 低电平有效
 389   1          P2 = ~(0x01<<Ledcount);       //选择位选
 390   1      
 391   1          key_scan();                            //摁键扫描
 392   1      }
 393          /******************************
 394          函数说明：工作模式选择 0测温度 1测电压
 395          入口参数：无   
 396          出口参数：无  
 397          ******************************/
 398          void mood_choose_work(void)
 399          {
 400   1              if(mood == 0)
 401   1              {
 402   2      
 403   2                      temp_result = Temp_Measure();   //测温度
 404   2                      LED_Translate(temp_result);             //转换出数码管显示值
 405   2                      STR_Translate(temp_result);             //转换出串口传输值
 406   2                      
 407   2                      if(alarm_mood == 1)                                                                //报警模式
 408   2                      {
 409   3                              if((temp_result>maxmum)||(temp_result<minmum))
 410   3                              {
 411   4                                      if(temp_result>maxmum)
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 8   

 412   4                                              {LED2 = ~LED2;            //超最大值绿灯闪      红灯常灭
 413   5                                              LED1 = 1;}
 414   4                                      if(temp_result<minmum)
 415   4                                          {LED1 = ~LED1;                 //低于最小值红灯闪 绿灯长灭
 416   5                                              LED2 = 1;}
 417   4                              }
 418   3                              else                                              //报警模式正常下 确保绿灯亮红灯灭
 419   3                              {           
 420   4                              LED1 = 1;
 421   4                              LED2 = 0;}                              
 422   3                      }
 423   2                      else                                                                                      //非报警模式 确保绿灯亮红灯灭
 424   2                      {
 425   3                              LED1 = 1;
 426   3                              LED2 = 0;
 427   3                      }
 428   2              }               
 429   1               if(mood == 1)
 430   1              {
 431   2                  LED1 = 0;
 432   2                      LED2 = 1;                                 //模式1红灯亮
 433   2                      VCC_measure = Voltage_Measure();        //测电压
 434   2                      LED_Translate(VCC_measure);                     //转换出数码管显示值
 435   2                  STR_Translate(VCC_measure);                 //转换出串口传输值
 436   2              }
 437   1      }
 438          
 439          /******************************
 440          函数说明：休眠状态检测 主循环调用 
 441          入口参数：无   
 442          出口参数：无  
 443          ******************************/
 444          void sleep_check(void)
 445          {
 446   1          if((sleep_flag == 1)||(sleep_flag1 == 1))    //sleep_flag 摁键进入   sleep_flag1 拨码开关进入
 447   1              {
 448   2                      if(sleep_flag1 == 1)
 449   2                      {turn_start = 0;sleep_flag1 = 0;}               
 450   2                      LED_Clean();       //关闭数码管
 451   2                      LED2 = 1;LED1 = 0;Delay_MS(200);LED1 = 1;Delay_MS(200);LED1 = 0;Delay_MS(200);LED1 = 1;            //休眠前红灯
             -闪烁        
 452   2                      PCON = 0x02;                                       //进入休眠  程序停在此处
 453   2                      _nop_();_nop_();_nop_();                   //唤醒后执行的空指令
 454   2                      LED2 = 0;Delay_MS(200);LED2 = 1;Delay_MS(200);LED2 = 0;Delay_MS(200);LED2 = 1;Delay_MS(200);LED2 = 0;  /
             -/唤醒后绿灯闪烁
 455   2              }
 456   1      }
 457          
 458          /******************************
 459          函数说明：摁键状态检测 主循环调用       摁键正常工作摁下执行程序在此处
 460          入口参数：无   
 461          出口参数：无  
 462          ******************************/
 463          void key_check(void)
 464          {
 465   1              if(key_final == 1)   // 摁键1摁下执行程序位置
 466   1              {}
 467   1              if(key_final == 2)       // 摁键2摁下执行程序位置
 468   1              {if(mood == 1) 
 469   2                    mood = 0;      
 470   2               else if(mood == 0)  
 471   2                    mood = 1;}
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 9   

 472   1              if(key_final == 3)       // 摁键3摁下执行程序位置
 473   1              {}
 474   1              key_final = 0;
 475   1      }
 476          /******************************
 477          函数说明：摁键设置参数 处理程序 设置最大值最小值
 478          入口参数：无   
 479          出口参数：无    影响全局变量 MAXMINtemp[]          loca_count   signal
 480          ******************************/
 481          void key_check_setnum(void)
 482          {       
 483   1          if(loca_count<3)     //个位十位 小数点后一位 处理
 484   1              {
 485   2                      if(key_final == 1)   // 摁键1摁下执行程序位置  当前位加1
 486   2                      {if(MAXMINtemp[loca_count]<9)
 487   3                                      MAXMINtemp[loca_count]++;
 488   3                              else
 489   3                                      MAXMINtemp[loca_count] = 0;}
 490   2                      if(key_final == 2)       // 摁键2摁下执行程序位置  当前位减1
 491   2                      {
 492   3                        if(MAXMINtemp[loca_count]>0)
 493   3                                      MAXMINtemp[loca_count]--;
 494   3                              else
 495   3                                      MAXMINtemp[loca_count] = 9;
 496   3                      }
 497   2              }
 498   1      
 499   1              if(loca_count == 3)        //符号位处理
 500   1              {
 501   2                      if(key_final == 1)   // 摁键1摁下执行程序位置  取反
 502   2                      {if(signal == 1) 
 503   3                    signal = 0;
 504   3               else if(signal == 0)  
 505   3                    signal = 1;}
 506   2                      if(key_final == 2)   // 摁键2摁下执行程序位置  取反
 507   2                      {if(signal == 1) 
 508   3                    signal = 0;
 509   3               else if(signal == 0)  
 510   3                    signal = 1;}
 511   2              }
 512   1              if(key_final == 3)           // 摁键3摁下执行程序位置
 513   1              {
 514   2                      if(loca_count<3)
 515   2                              loca_count++;
 516   2                      else
 517   2                              loca_count = 0;
 518   2              }
 519   1              key_final = 0;
 520   1      }
 521          /******************************
 522          函数说明：摁键设置参数 处理程序 设置最大值最小值
 523          入口参数：无   全局变量 MAXMINtemp[]       loca_count   signal
 524          出口参数： numresult 最大值最小值计算值
 525          ******************************/
 526          float set_num_calculate()
 527          {
 528   1              float numresult = 0;
 529   1              numresult = 10*(float)MAXMINtemp[0] + (float)MAXMINtemp[1] + 0.1*(float)MAXMINtemp[2];
 530   1              if (signal == 1)
 531   1              numresult = 0 - numresult;
 532   1              return numresult;
 533   1      }
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 10  

 534          
 535          /******************************
 536          函数说明：拨码开关状态检测 主循环调用   拨码开关正常工作摁下执行程序在此处
 537          入口参数：无   
 538          出口参数：无  
 539          ******************************/
 540          void turn_check(void)
 541          {
 542   1              while((TURN1 == 0)&& (TURN2 != 0))         //拨码1为on 与2互锁
 543   1              {       LED1 = 0;
 544   2                      LED2 = 0;
 545   2                      INT_CLKO = 0x00; //禁用外部中断2
 546   2                      if(flag1==0)
 547   2                      {
 548   3                              flag1 = 1;              
 549   3                              if ((maxmum<100)&&(maxmum>-100))          //这一部分防止设置完min 设置max时 显示的设置初始值是min的
 550   3                              {
 551   4                                      maxmum1 = (int)(maxmum*10);
 552   4                                              if(maxmum >= 0) 
 553   4                                              {signal = 0;}                      
 554   4                                              if(maxmum < 0)  
 555   4                                              {signal = 1;
 556   5                                              maxmum1 = 0-maxmum1;}
 557   4                                      MAXMINtemp[0] =  maxmum1/100;                                           
 558   4                                      MAXMINtemp[1] =  maxmum1%100/10;              
 559   4                                      MAXMINtemp[2] =  maxmum1%10;              
 560   4                          }
 561   3                      }
 562   2                      key_check_setnum();
 563   2                      maxmum = set_num_calculate();
 564   2                      LED_Translate(maxmum);
 565   2                      WDT_CONTR =0x3E;                        //喂看门狗
 566   2              }
 567   1              INT_CLKO |= 0x10; //允许外部中断2
 568   1      
 569   1              while((TURN2 == 0)&& (TURN1 != 0))         //拨码2为on 与1互锁
 570   1              {
 571   2                  LED1 = 0;
 572   2                      LED2 = 0;
 573   2                      INT_CLKO = 0x00; //禁用外部中断2
 574   2                      if(flag1==0)
 575   2                  {
 576   3                              flag1 = 1;                      
 577   3                              if ((minmum<100)&&(minmum>-100))     //这一部分防止设置完max 设置min时 显示的设置初始值是max的
 578   3                              {
 579   4                                      minmum1 = (int)(minmum*10);
 580   4                                      if(minmum >= 0) 
 581   4                                      {signal = 0;}                      //数码管第1位显示
 582   4                                      if(minmum < 0)  
 583   4                                      {signal = 1;
 584   5                                      minmum1 = 0-minmum1;}
 585   4                                      MAXMINtemp[0] =  minmum1/100;                                           
 586   4                                      MAXMINtemp[1] =  minmum1%100/10;              
 587   4                                      MAXMINtemp[2] =  minmum1%10;              
 588   4                          }
 589   3                      }
 590   2                      key_check_setnum();                              
 591   2                      minmum = set_num_calculate();    //      赋值
 592   2                      LED_Translate(minmum);                   //显示最小值
 593   2                      WDT_CONTR =0x3E;                         //喂看门狗
 594   2              }
 595   1              INT_CLKO |= 0x10; //允许外部中断2
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 11  

 596   1              flag1 = 0;
 597   1                if(TURN3 == 0)                                           //拨码3选择是否进入上下限报警报警
 598   1                {
 599   2                              alarm_mood = 1;
 600   2                }
 601   1                else
 602   1                {
 603   2                        alarm_mood = 0;
 604   2                        LED2 = 0;
 605   2                }
 606   1      //     if(TURN4 == 0)                                           //拨码4进入休眠模式
 607   1      //      {
 608   1      //              Delay_MS(50);
 609   1      //          if(TURN4 == 0)
 610   1      //              {
 611   1      //                      if((sleep_flag1 == 0)&&(turn_start == 1))
 612   1      //                      {sleep_flag1 = 1;}
 613   1      //              }
 614   1      //      }
 615   1      //      else if (turn_start == 0)
 616   1      //      {turn_start = 1;}
 617   1      }
 618          /******************************
 619          函数说明：串口1初始化程序 9600bps
 620          入口参数：无   
 621          出口参数：无  
 622          ******************************/
 623          void UartInit(void)             //9600bps@11.0592MHz
 624          {
 625   1              SCON = 0x50;            //8位数据,可变波特率
 626   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
 627   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 628   1              TMOD &= 0x0F;           //设定定时器1为16位自动重装方式
 629   1              TL1 = 0xE0;             //设定定时初值
 630   1              TH1 = 0xFE;             //设定定时初值
 631   1              ET1 = 0;                //禁止定时器1中断
 632   1              TR1 = 1;                //启动定时器1
 633   1      }
 634          /******************************
 635          函数说明：串口1中断服务程序 发送数据到串口
 636          入口参数：无    发送全局变量 Sendtemp[] 一次函数发全部数据
 637          出口参数：无  
 638          ******************************/
 639          void UART1_ISR() interrupt 4
 640          {   
 641   1              if (RI)                                  //如果收到请求信息
 642   1              {   
 643   2                  SBUF =Sendtemp[0] ;   //发送整个数组    
 644   2                      Delay_MS(2);                                            
 645   2                      SBUF =Sendtemp[1] ;            
 646   2                      Delay_MS(2);       
 647   2                      SBUF =Sendtemp[2] ;     
 648   2                      Delay_MS(2);
 649   2                      SBUF =Sendtemp[3];            
 650   2                      Delay_MS(2);                                            
 651   2                      SBUF =Sendtemp[4];        
 652   2                      Delay_MS(2);
 653   2                      SBUF =Sendtemp[5];       
 654   2                      Delay_MS(2);       
 655   2               
 656   2                 RI = 0;
 657   2              }
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 12  

 658   1              else
 659   1                 TI = 0;                               //清发送标志
 660   1      }
 661          void main(void)
 662          {  
 663   1         WDT_CONTR =0x3E;
 664   1         Init_ADC();       //初始化ADC
 665   1         UartInit();
 666   1         ES = 1; 
 667   1         Timer0Init();     //设置T0用作数码管显示定时500us扫描，中断模式
 668   1         ET0=1;            //允许T0定时中断
 669   1         INT_CLKO |= 0x10; //允许外部中断2
 670   1         EA=1;                         //中断总使能
 671   1         Ledcount=0;      //LED扫描显示计数用
 672   1         P0M0=0xff;       //推挽输出驱动共阴极数码管  
 673   1         KEY1 = 1;KEY2 = 1;KEY3 = 1;                   //拉高所有摁键  低电平有效
 674   1         TURN1 = 1;TURN2 = 1;TURN3 = 1;TURN4 = 1;                //拉高所有拨码开关 低电平有效
 675   1                  
 676   1         Showtemp[0]=Table[1];
 677   1         Showtemp[1]=Table[0];
 678   1         Showtemp[2]=Table[2];
 679   1         Showtemp[3]=Table[7];
 680   1      
 681   1         Delay_MS(2000);
 682   1         
 683   1         
 684   1         while(1)
 685   1         {    
 686   2                      turn_check();                      //拨码开关检测
 687   2                      sleep_check();                     //休眠模式检测
 688   2              key_check();                       //摁键是否摁下检测
 689   2                      mood_choose_work();                //工作模式选择并work （测量）
 690   2                      if(maxmum<minmum)                  //两种error
 691   2                      error = 2;
 692   2                      if(error == 1)
 693   2                      {
 694   3                              Showtemp[0]=0xff;
 695   3                              Showtemp[1]=0xff;
 696   3                              Showtemp[2]=0x86;   //E
 697   3                              Showtemp[3]=Table[1];   //显示E1
 698   3                      }
 699   2                      if (error == 2)
 700   2                      {
 701   3                              Showtemp[0]=0xff;
 702   3                              Showtemp[1]=0xff;
 703   3                              Showtemp[2]=0x86; //E
 704   3                              Showtemp[3]=Table[2];   //显示E2
 705   3                      }
 706   2      
 707   2                      Delay_MS(200);                     //延时200ms
 708   2                      WDT_CONTR =0x3E;                   //喂看门狗
 709   2         }
 710   1      }                


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3724    ----
   CONSTANT SIZE    =   1195    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47      32
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.02   MAIN                                                                  06/15/2018 03:20:22 PAGE 13  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
